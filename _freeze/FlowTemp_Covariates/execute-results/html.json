{
  "hash": "24e2584d4a31cc51eb0065b746ad7912",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Environmental Covariates\"\nformat: html\n---\n\n\n\n\n\n\nPurpose: Generate annual covariate data describing seasonal air temperature, natural flow regimes, and managed flow regimes.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## Streamflow\n\nSpecify USGS streamflow monitoring sites and map:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsites <- c(\"13011000\", # Snake at Moran\n           \"13018750\", # Snake below Flat\n           \"13027500\", # Salt\n           \"13023000\", # Greys\n           \"13011900\", # Buffalo Fork\n           \"13015000\", # Gros Ventre - Zenith\n           \"13014500\", # Gros Ventre - Kelly\n           \"13018350\", # Flat - below Cache\n           \"13018300\", # Cache \n           \"13016450\", # Fish\n           \"13011820\") # Blackrock\nsite.info <- readNWISsite(sites)[,c(1:2,7,8,18)] # get site info\nnames(site.info) <- c(\"agency\", \"logger\", \"lat\", \"long\", \"site\") # rename columns \nsite.info$sitesimp <- c(\"SnakeMoran\", \"Blackrock\", \"BuffaloFork\", \"GrosVentreKelly\", \"GrosVentreZenith\", \"Fish\", \"Cache\", \"FlatBeCache\", \"SnakeBeFlat\", \"Greys\", \"Salt\")\nmapview(st_as_sf(site.info, coords = c(\"long\", \"lat\"), crs = \"+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84\"))\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"leaflet html-widget html-fill-item\" id=\"htmlwidget-a2516eddee52f07150b9\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-a2516eddee52f07150b9\">{\"x\":{\"options\":{\"minZoom\":1,\"maxZoom\":52,\"crs\":{\"crsClass\":\"L.CRS.EPSG3857\",\"code\":null,\"proj4def\":null,\"projectedBounds\":null,\"options\":{}},\"preferCanvas\":false,\"bounceAtZoomLimits\":false,\"maxBounds\":[[[-90,-370]],[[90,370]]]},\"calls\":[{\"method\":\"addProviderTiles\",\"args\":[\"CartoDB.Positron\",\"CartoDB.Positron\",\"CartoDB.Positron\",{\"errorTileUrl\":\"\",\"noWrap\":false,\"detectRetina\":false,\"pane\":\"tilePane\"}]},{\"method\":\"addProviderTiles\",\"args\":[\"CartoDB.DarkMatter\",\"CartoDB.DarkMatter\",\"CartoDB.DarkMatter\",{\"errorTileUrl\":\"\",\"noWrap\":false,\"detectRetina\":false,\"pane\":\"tilePane\"}]},{\"method\":\"addProviderTiles\",\"args\":[\"OpenStreetMap\",\"OpenStreetMap\",\"OpenStreetMap\",{\"errorTileUrl\":\"\",\"noWrap\":false,\"detectRetina\":false,\"pane\":\"tilePane\"}]},{\"method\":\"addProviderTiles\",\"args\":[\"Esri.WorldImagery\",\"Esri.WorldImagery\",\"Esri.WorldImagery\",{\"errorTileUrl\":\"\",\"noWrap\":false,\"detectRetina\":false,\"pane\":\"tilePane\"}]},{\"method\":\"addProviderTiles\",\"args\":[\"OpenTopoMap\",\"OpenTopoMap\",\"OpenTopoMap\",{\"errorTileUrl\":\"\",\"noWrap\":false,\"detectRetina\":false,\"pane\":\"tilePane\"}]},{\"method\":\"createMapPane\",\"args\":[\"point\",440]},{\"method\":\"addCircleMarkers\",\"args\":[[43.85851819,43.8071111,43.83805556,43.62088889,43.5572222,43.50076005,43.45213098,43.4583611,43.3722222,43.14305556,43.0797222],[-110.5866219,-110.1787222,-110.4408333,-110.6230556,-110.7627778,-110.8716,-110.7041203,-110.7970278,-110.7386111,-110.9769444,-111.0372222],6,null,\"st_as_sf(site.info, coords = c(\\\"long\\\", \\\"lat\\\"),....\",{\"crs\":{\"crsClass\":\"L.CRS.EPSG3857\",\"code\":null,\"proj4def\":null,\"projectedBounds\":null,\"options\":{}},\"pane\":\"point\",\"stroke\":true,\"color\":\"#333333\",\"weight\":1,\"opacity\":0.9,\"fill\":true,\"fillColor\":\"#6666FF\",\"fillOpacity\":0.6},null,null,[\"<div class='scrollableContainer'><table class=mapview-popup id='popup'><tr class='coord'><td><\\/td><th><b>Feature ID&emsp;<\\/b><\\/th><td>1&emsp;<\\/td><\\/tr><tr><td>1<\\/td><th>agency&emsp;<\\/th><td>USGS&emsp;<\\/td><\\/tr><tr><td>2<\\/td><th>logger&emsp;<\\/th><td>13011000&emsp;<\\/td><\\/tr><tr><td>3<\\/td><th>site&emsp;<\\/th><td>MORAN&emsp;<\\/td><\\/tr><tr><td>4<\\/td><th>sitesimp&emsp;<\\/th><td>SnakeMoran&emsp;<\\/td><\\/tr><tr><td>5<\\/td><th>geometry&emsp;<\\/th><td>sfc_POINT&emsp;<\\/td><\\/tr><\\/table><\\/div>\",\"<div class='scrollableContainer'><table class=mapview-popup id='popup'><tr class='coord'><td><\\/td><th><b>Feature ID&emsp;<\\/b><\\/th><td>2&emsp;<\\/td><\\/tr><tr><td>1<\\/td><th>agency&emsp;<\\/th><td>USGS&emsp;<\\/td><\\/tr><tr><td>2<\\/td><th>logger&emsp;<\\/th><td>13011820&emsp;<\\/td><\\/tr><tr><td>3<\\/td><th>site&emsp;<\\/th><td>ANGLE MOUNTAIN&emsp;<\\/td><\\/tr><tr><td>4<\\/td><th>sitesimp&emsp;<\\/th><td>Blackrock&emsp;<\\/td><\\/tr><tr><td>5<\\/td><th>geometry&emsp;<\\/th><td>sfc_POINT&emsp;<\\/td><\\/tr><\\/table><\\/div>\",\"<div class='scrollableContainer'><table class=mapview-popup id='popup'><tr class='coord'><td><\\/td><th><b>Feature ID&emsp;<\\/b><\\/th><td>3&emsp;<\\/td><\\/tr><tr><td>1<\\/td><th>agency&emsp;<\\/th><td>USGS&emsp;<\\/td><\\/tr><tr><td>2<\\/td><th>logger&emsp;<\\/th><td>13011900&emsp;<\\/td><\\/tr><tr><td>3<\\/td><th>site&emsp;<\\/th><td>DAVIS HILL&emsp;<\\/td><\\/tr><tr><td>4<\\/td><th>sitesimp&emsp;<\\/th><td>BuffaloFork&emsp;<\\/td><\\/tr><tr><td>5<\\/td><th>geometry&emsp;<\\/th><td>sfc_POINT&emsp;<\\/td><\\/tr><\\/table><\\/div>\",\"<div class='scrollableContainer'><table class=mapview-popup id='popup'><tr class='coord'><td><\\/td><th><b>Feature ID&emsp;<\\/b><\\/th><td>4&emsp;<\\/td><\\/tr><tr><td>1<\\/td><th>agency&emsp;<\\/th><td>USGS&emsp;<\\/td><\\/tr><tr><td>2<\\/td><th>logger&emsp;<\\/th><td>13014500&emsp;<\\/td><\\/tr><tr><td>3<\\/td><th>site&emsp;<\\/th><td>BLUE MINER LAKE&emsp;<\\/td><\\/tr><tr><td>4<\\/td><th>sitesimp&emsp;<\\/th><td>GrosVentreKelly&emsp;<\\/td><\\/tr><tr><td>5<\\/td><th>geometry&emsp;<\\/th><td>sfc_POINT&emsp;<\\/td><\\/tr><\\/table><\\/div>\",\"<div class='scrollableContainer'><table class=mapview-popup id='popup'><tr class='coord'><td><\\/td><th><b>Feature ID&emsp;<\\/b><\\/th><td>5&emsp;<\\/td><\\/tr><tr><td>1<\\/td><th>agency&emsp;<\\/th><td>USGS&emsp;<\\/td><\\/tr><tr><td>2<\\/td><th>logger&emsp;<\\/th><td>13015000&emsp;<\\/td><\\/tr><tr><td>3<\\/td><th>site&emsp;<\\/th><td>TETON VILLAGE&emsp;<\\/td><\\/tr><tr><td>4<\\/td><th>sitesimp&emsp;<\\/th><td>GrosVentreZenith&emsp;<\\/td><\\/tr><tr><td>5<\\/td><th>geometry&emsp;<\\/th><td>sfc_POINT&emsp;<\\/td><\\/tr><\\/table><\\/div>\",\"<div class='scrollableContainer'><table class=mapview-popup id='popup'><tr class='coord'><td><\\/td><th><b>Feature ID&emsp;<\\/b><\\/th><td>6&emsp;<\\/td><\\/tr><tr><td>1<\\/td><th>agency&emsp;<\\/th><td>USGS&emsp;<\\/td><\\/tr><tr><td>2<\\/td><th>logger&emsp;<\\/th><td>13016450&emsp;<\\/td><\\/tr><tr><td>3<\\/td><th>site&emsp;<\\/th><td>TETON VILLAGE&emsp;<\\/td><\\/tr><tr><td>4<\\/td><th>sitesimp&emsp;<\\/th><td>Fish&emsp;<\\/td><\\/tr><tr><td>5<\\/td><th>geometry&emsp;<\\/th><td>sfc_POINT&emsp;<\\/td><\\/tr><\\/table><\\/div>\",\"<div class='scrollableContainer'><table class=mapview-popup id='popup'><tr class='coord'><td><\\/td><th><b>Feature ID&emsp;<\\/b><\\/th><td>7&emsp;<\\/td><\\/tr><tr><td>1<\\/td><th>agency&emsp;<\\/th><td>USGS&emsp;<\\/td><\\/tr><tr><td>2<\\/td><th>logger&emsp;<\\/th><td>13018300&emsp;<\\/td><\\/tr><tr><td>3<\\/td><th>site&emsp;<\\/th><td>CACHE CREEK&emsp;<\\/td><\\/tr><tr><td>4<\\/td><th>sitesimp&emsp;<\\/th><td>Cache&emsp;<\\/td><\\/tr><tr><td>5<\\/td><th>geometry&emsp;<\\/th><td>sfc_POINT&emsp;<\\/td><\\/tr><\\/table><\\/div>\",\"<div class='scrollableContainer'><table class=mapview-popup id='popup'><tr class='coord'><td><\\/td><th><b>Feature ID&emsp;<\\/b><\\/th><td>8&emsp;<\\/td><\\/tr><tr><td>1<\\/td><th>agency&emsp;<\\/th><td>USGS&emsp;<\\/td><\\/tr><tr><td>2<\\/td><th>logger&emsp;<\\/th><td>13018350&emsp;<\\/td><\\/tr><tr><td>3<\\/td><th>site&emsp;<\\/th><td>JACKSON&emsp;<\\/td><\\/tr><tr><td>4<\\/td><th>sitesimp&emsp;<\\/th><td>FlatBeCache&emsp;<\\/td><\\/tr><tr><td>5<\\/td><th>geometry&emsp;<\\/th><td>sfc_POINT&emsp;<\\/td><\\/tr><\\/table><\\/div>\",\"<div class='scrollableContainer'><table class=mapview-popup id='popup'><tr class='coord'><td><\\/td><th><b>Feature ID&emsp;<\\/b><\\/th><td>9&emsp;<\\/td><\\/tr><tr><td>1<\\/td><th>agency&emsp;<\\/th><td>USGS&emsp;<\\/td><\\/tr><tr><td>2<\\/td><th>logger&emsp;<\\/th><td>13018750&emsp;<\\/td><\\/tr><tr><td>3<\\/td><th>site&emsp;<\\/th><td>CAMP DAVIS&emsp;<\\/td><\\/tr><tr><td>4<\\/td><th>sitesimp&emsp;<\\/th><td>SnakeBeFlat&emsp;<\\/td><\\/tr><tr><td>5<\\/td><th>geometry&emsp;<\\/th><td>sfc_POINT&emsp;<\\/td><\\/tr><\\/table><\\/div>\",\"<div class='scrollableContainer'><table class=mapview-popup id='popup'><tr class='coord'><td><\\/td><th><b>Feature ID&emsp;<\\/b><\\/th><td>10&emsp;<\\/td><\\/tr><tr><td>1<\\/td><th>agency&emsp;<\\/th><td>USGS&emsp;<\\/td><\\/tr><tr><td>2<\\/td><th>logger&emsp;<\\/th><td>13023000&emsp;<\\/td><\\/tr><tr><td>3<\\/td><th>site&emsp;<\\/th><td>FERRY PEAK&emsp;<\\/td><\\/tr><tr><td>4<\\/td><th>sitesimp&emsp;<\\/th><td>Greys&emsp;<\\/td><\\/tr><tr><td>5<\\/td><th>geometry&emsp;<\\/th><td>sfc_POINT&emsp;<\\/td><\\/tr><\\/table><\\/div>\",\"<div class='scrollableContainer'><table class=mapview-popup id='popup'><tr class='coord'><td><\\/td><th><b>Feature ID&emsp;<\\/b><\\/th><td>11&emsp;<\\/td><\\/tr><tr><td>1<\\/td><th>agency&emsp;<\\/th><td>USGS&emsp;<\\/td><\\/tr><tr><td>2<\\/td><th>logger&emsp;<\\/th><td>13027500&emsp;<\\/td><\\/tr><tr><td>3<\\/td><th>site&emsp;<\\/th><td>ETNA, WY&emsp;<\\/td><\\/tr><tr><td>4<\\/td><th>sitesimp&emsp;<\\/th><td>Salt&emsp;<\\/td><\\/tr><tr><td>5<\\/td><th>geometry&emsp;<\\/th><td>sfc_POINT&emsp;<\\/td><\\/tr><\\/table><\\/div>\"],{\"maxWidth\":800,\"minWidth\":50,\"autoPan\":true,\"keepInView\":false,\"closeButton\":true,\"closeOnClick\":true,\"className\":\"\"},[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\"],{\"interactive\":false,\"permanent\":false,\"direction\":\"auto\",\"opacity\":1,\"offset\":[0,0],\"textsize\":\"10px\",\"textOnly\":false,\"className\":\"\",\"sticky\":true},null]},{\"method\":\"addScaleBar\",\"args\":[{\"maxWidth\":100,\"metric\":true,\"imperial\":true,\"updateWhenIdle\":true,\"position\":\"bottomleft\"}]},{\"method\":\"addHomeButton\",\"args\":[-111.0372222,43.0797222,-110.1787222,43.85851819,true,\"st_as_sf(site.info, coords = c(\\\"long\\\", \\\"lat\\\"),....\",\"Zoom to st_as_sf(site.info, coords = c(\\\"long\\\", \\\"lat\\\"),....\",\"<strong> st_as_sf(site.info, coords = c(\\\"long\\\", \\\"lat\\\"),.... <\\/strong>\",\"bottomright\"]},{\"method\":\"addLayersControl\",\"args\":[[\"CartoDB.Positron\",\"CartoDB.DarkMatter\",\"OpenStreetMap\",\"Esri.WorldImagery\",\"OpenTopoMap\"],\"st_as_sf(site.info, coords = c(\\\"long\\\", \\\"lat\\\"),....\",{\"collapsed\":true,\"autoZIndex\":true,\"position\":\"topleft\"}]},{\"method\":\"addLegend\",\"args\":[{\"colors\":[\"#6666FF\"],\"labels\":[\"st_as_sf(site.info, coords = c(\\\"long\\\", \\\"lat\\\"),....\"],\"na_color\":null,\"na_label\":\"NA\",\"opacity\":1,\"position\":\"topright\",\"type\":\"factor\",\"title\":\"\",\"extra\":null,\"layerId\":null,\"className\":\"info legend\",\"group\":\"st_as_sf(site.info, coords = c(\\\"long\\\", \\\"lat\\\"),....\"}]}],\"limits\":{\"lat\":[43.0797222,43.85851819],\"lng\":[-111.0372222,-110.1787222]},\"fitBounds\":[43.0797222,-111.0372222,43.85851819,-110.1787222,[]]},\"evals\":[],\"jsHooks\":{\"render\":[{\"code\":\"function(el, x, data) {\\n  return (\\n      function(el, x, data) {\\n      // get the leaflet map\\n      var map = this; //HTMLWidgets.find('#' + el.id);\\n      // we need a new div element because we have to handle\\n      // the mouseover output separately\\n      // debugger;\\n      function addElement () {\\n      // generate new div Element\\n      var newDiv = $(document.createElement('div'));\\n      // append at end of leaflet htmlwidget container\\n      $(el).append(newDiv);\\n      //provide ID and style\\n      newDiv.addClass('lnlt');\\n      newDiv.css({\\n      'position': 'relative',\\n      'bottomleft':  '0px',\\n      'background-color': 'rgba(255, 255, 255, 0.7)',\\n      'box-shadow': '0 0 2px #bbb',\\n      'background-clip': 'padding-box',\\n      'margin': '0',\\n      'padding-left': '5px',\\n      'color': '#333',\\n      'font': '9px/1.5 \\\"Helvetica Neue\\\", Arial, Helvetica, sans-serif',\\n      'z-index': '700',\\n      });\\n      return newDiv;\\n      }\\n\\n\\n      // check for already existing lnlt class to not duplicate\\n      var lnlt = $(el).find('.lnlt');\\n\\n      if(!lnlt.length) {\\n      lnlt = addElement();\\n\\n      // grab the special div we generated in the beginning\\n      // and put the mousmove output there\\n\\n      map.on('mousemove', function (e) {\\n      if (e.originalEvent.ctrlKey) {\\n      if (document.querySelector('.lnlt') === null) lnlt = addElement();\\n      lnlt.text(\\n                           ' lon: ' + (e.latlng.lng).toFixed(5) +\\n                           ' | lat: ' + (e.latlng.lat).toFixed(5) +\\n                           ' | zoom: ' + map.getZoom() +\\n                           ' | x: ' + L.CRS.EPSG3857.project(e.latlng).x.toFixed(0) +\\n                           ' | y: ' + L.CRS.EPSG3857.project(e.latlng).y.toFixed(0) +\\n                           ' | epsg: 3857 ' +\\n                           ' | proj4: +proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +no_defs ');\\n      } else {\\n      if (document.querySelector('.lnlt') === null) lnlt = addElement();\\n      lnlt.text(\\n                      ' lon: ' + (e.latlng.lng).toFixed(5) +\\n                      ' | lat: ' + (e.latlng.lat).toFixed(5) +\\n                      ' | zoom: ' + map.getZoom() + ' ');\\n      }\\n      });\\n\\n      // remove the lnlt div when mouse leaves map\\n      map.on('mouseout', function (e) {\\n      var strip = document.querySelector('.lnlt');\\n      if( strip !==null) strip.remove();\\n      });\\n\\n      };\\n\\n      //$(el).keypress(67, function(e) {\\n      map.on('preclick', function(e) {\\n      if (e.originalEvent.ctrlKey) {\\n      if (document.querySelector('.lnlt') === null) lnlt = addElement();\\n      lnlt.text(\\n                      ' lon: ' + (e.latlng.lng).toFixed(5) +\\n                      ' | lat: ' + (e.latlng.lat).toFixed(5) +\\n                      ' | zoom: ' + map.getZoom() + ' ');\\n      var txt = document.querySelector('.lnlt').textContent;\\n      console.log(txt);\\n      //txt.innerText.focus();\\n      //txt.select();\\n      setClipboardText('\\\"' + txt + '\\\"');\\n      }\\n      });\\n\\n      }\\n      ).call(this.getMap(), el, x, data);\\n}\",\"data\":null},{\"code\":\"function(el, x, data) {\\n  return (function(el,x,data){\\n           var map = this;\\n\\n           map.on('keypress', function(e) {\\n               console.log(e.originalEvent.code);\\n               var key = e.originalEvent.code;\\n               if (key === 'KeyE') {\\n                   var bb = this.getBounds();\\n                   var txt = JSON.stringify(bb);\\n                   console.log(txt);\\n\\n                   setClipboardText('\\\\'' + txt + '\\\\'');\\n               }\\n           })\\n        }).call(this.getMap(), el, x, data);\\n}\",\"data\":null}]}}</script>\n```\n\n:::\n:::\n\n\n\n\n\n\nExtract daily mean discharge and temp data from USGS NWIS and get date range for each gage:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflow <- readNWISdata(sites = sites, parameterCd = c(\"00060\"), service = \"dv\", startDate = \"1960-01-01\", endDate = \"2023-09-01\")\nnames(flow) <- c(\"agency\", \"logger\", \"date\", \"q\", \"x2\", \"x3\")\nflow %>% group_by(logger) %>% summarize(mindate = min(date), maxdate = max(date))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 11 × 3\n   logger   mindate             maxdate            \n   <chr>    <dttm>              <dttm>             \n 1 13011000 1960-01-01 00:00:00 2023-09-01 00:00:00\n 2 13011820 2017-10-27 00:00:00 2023-09-01 00:00:00\n 3 13011900 1965-09-22 00:00:00 2023-09-01 00:00:00\n 4 13014500 2008-04-01 00:00:00 2023-09-01 00:00:00\n 5 13015000 1987-10-01 00:00:00 2023-09-01 00:00:00\n 6 13016450 1994-03-24 00:00:00 2023-09-01 00:00:00\n 7 13018300 1962-07-01 00:00:00 2023-09-01 00:00:00\n 8 13018350 1989-04-01 00:00:00 2023-09-01 00:00:00\n 9 13018750 1975-11-12 00:00:00 2023-09-01 00:00:00\n10 13023000 1960-01-01 00:00:00 2023-09-01 00:00:00\n11 13027500 1960-01-01 00:00:00 2023-09-01 00:00:00\n```\n\n\n:::\n:::\n\n\n\n\n\n\nSome data manipulation:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflow <- tibble(flow %>% dplyr::select(logger, date, q) %>% mutate(date = as_date(date), doy = yday(date), month = month(date), year = year(date)))\nflow$broodyr <- NA # create brood year variable\nflow$broodyr <- ifelse(flow$month >= 9 & flow$month <= 12, flow$year, flow$year-1)\nflow <- flow %>% filter(!broodyr %in% c(1959,2023)) # drop incomplete brood years\nflow <- flow %>% left_join(site.info %>% select(logger, sitesimp))\n```\n:::\n\n\n\n\n\n\nView raw data\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflow %>% ggplot() + geom_line(aes(x = date, y = q)) + facet_wrap(~ sitesimp, scales = \"free_y\")\n```\n\n::: {.cell-output-display}\n![](FlowTemp_Covariates_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\nSpread by date and calculate and explore correlation between dam release and natural flow:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflow2 <- flow %>% select(-logger) %>% spread(sitesimp, q) %>% mutate(SnakeNat = SnakeBeFlat - SnakeMoran,\n                                                                     FlatNat = FlatBeCache - Cache,\n                                                                     BuffNat = BuffaloFork - Blackrock)\n# plot(SnakeNat ~ date, flow2, type = \"l\", xlim = c(date(\"2018-01-01\"), date(\"2022-01-01\")))\n# plot(FlatNat ~ date, flow2, type = \"l\", xlim = c(date(\"2010-01-01\"), date(\"2020-01-01\")))\n# plot(BuffNat ~ date, flow2, type = \"l\", xlim = c(date(\"2018-01-01\"), date(\"2022-01-01\")))\n# plot(Fish ~ date, flow2, type = \"l\", xlim = c(date(\"2018-01-01\"), date(\"2022-01-01\")))\nplot(SnakeNat ~ SnakeMoran, flow2)\n```\n\n::: {.cell-output-display}\n![](FlowTemp_Covariates_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n\n```{.r .cell-code}\ncor.test(flow2$SnakeNat, flow2$SnakeMoran)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tPearson's product-moment correlation\n\ndata:  flow2$SnakeNat and flow2$SnakeMoran\nt = 95.373, df = 17458, p-value < 2.2e-16\nalternative hypothesis: true correlation is not equal to 0\n95 percent confidence interval:\n 0.5754375 0.5949431\nsample estimates:\n     cor \n0.585275 \n```\n\n\n:::\n:::\n\n\n\n\n\n\nCalculate first-differenced daily flow after log transform, rate of daily change in flow per Ward et al. 2015, Global Change Biology (enables calculation of flow variability)\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflow2 <- flow2 %>% mutate(varJLD = lead(log(SnakeMoran)) - log(SnakeMoran),\n                          varSnakeNat = lead(log(SnakeNat)) - log(SnakeNat),\n                          varSnakeBeFlat = lead(log(SnakeBeFlat)) - log(SnakeBeFlat),\n                          varSalt = lead(log(Salt)) - log(Salt),\n                          varBuff = lead(log(BuffNat)) - log(BuffNat),\n                          varFlat = lead(log(FlatNat)) - log(FlatNat),\n                          varGVK = lead(log(GrosVentreKelly)) - log(GrosVentreKelly),\n                          varGreys = lead(log(Greys)) - log(Greys),\n                          varFish = lead(log(Fish)) - log(Fish)) \n\nplot(varGreys ~ date, flow2 %>% filter(broodyr %in% c(2021)), type = \"l\")\n```\n\n::: {.cell-output-display}\n![](FlowTemp_Covariates_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\nCalculate day of brood year\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndlist1 <- list()\nyrs <- unique(flow2$broodyr)\nfor (i in 1:length(yrs)) {\n  d <- filter(flow2, broodyr == yrs[i])\n  d$bydoy <- c(1:dim(d)[1])\n  dlist1[[i]] <- d\n}\nflow3 <- bind_rows(dlist1)\n```\n:::\n\n\n\n\n\n\nGather by site\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflow4 <- flow3 %>% \n  select(date, doy, month, year, broodyr, bydoy, SnakeBeFlat, SnakeMoran, SnakeNat, Salt, GrosVentreKelly, Greys, FlatNat, Fish, BuffNat) %>% \n  rename(GrosVentre = GrosVentreKelly, Flat = FlatNat, Buffalo = BuffNat) %>%\n  gather(key = \"site\", value = \"flow_cfs\", 7:15)\nflow5 <- flow3 %>% \n  select(date, doy, month, year, broodyr, bydoy, varSnakeBeFlat, varJLD, varSnakeNat, varSalt, varGVK, varGreys, varFlat, varFish, varBuff) %>% \n  rename(SnakeBeFlat = varSnakeBeFlat, SnakeMoran = varJLD, SnakeNat = varSnakeNat, Salt = varSalt, GrosVentre = varGVK, Greys = varGreys, Flat = varFlat, Fish = varFish, Buffalo = varBuff) %>%\n  gather(key = \"site\", value = \"flow_var\", 7:15)\nflow6 <- flow4 %>% left_join(flow5)\n```\n:::\n\n\n\n\n\n\nPlot daily proportion of flow from JLD vs Natural\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mar = c(4,5,1,1), mgp = c(2.5,1,0))\nflowpr <- flow2 %>% \n  select(date, doy, month, year, broodyr, SnakeBeFlat, SnakeMoran, SnakeNat) %>% \n  drop_na() %>% mutate(PrJLD = SnakeMoran / SnakeBeFlat) %>% group_by(doy) %>% \n  summarize(minpr = min(PrJLD), q25pr = quantile(PrJLD, probs = 0.25), medpr = median(PrJLD), meanpr = mean(PrJLD), q75pr = quantile(PrJLD, probs = 0.75), maxpr = max(PrJLD))\nrange(flowpr$meanpr)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.2296375 0.6438328\n```\n\n\n:::\n\n```{.r .cell-code}\nplot(medpr ~ doy, flowpr, type = \"n\", ylim = c(0,1), xlab = \"\", ylab = \"Proportional contribution of JLD release to total flow\\n(Snake Moran / Snake Below Flat)\", axes = F)\naxis(1, at = c(1,61,122,183,245,306,367), labels = c(\"Jan\",\"Mar\",\"May\",\"Jul\",\"Sep\",\"Nov\",\"Jan\"))\naxis(2)\nbox()\npolygon(x = c(flowpr$doy, rev(flowpr$doy)), y = c(flowpr$minpr, rev(flowpr$maxpr)), col = \"grey80\", border = NA)\npolygon(x = c(flowpr$doy, rev(flowpr$doy)), y = c(flowpr$q25pr, rev(flowpr$q75pr)), col = \"grey60\", border = NA)\n#lines(meanpr ~ doy, flowpr, lwd = 3)\nlines(medpr ~ doy, flowpr, lwd = 3)\nlegend(x = -15, y = 1.05, legend = c(\"Median\"), lwd = c(3), bty = \"n\")\nlegend(x = 3, y = 0.99, legend = c(\"IQR\", \"Range\"), fill = c(\"grey60\",\"grey80\"), bty = \"n\")\n```\n\n::: {.cell-output-display}\n![](FlowTemp_Covariates_files/figure-html/unnamed-chunk-10-1.png){width=480}\n:::\n:::\n\n\n\n\n\n\n\n\n\nPlot natural (blue), JLD (red), and combined mean daily flow (grey) for each year:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd <- flow6 %>% \n  filter(site %in% c(\"SnakeBeFlat\", \"SnakeMoran\", \"SnakeNat\")) %>% \n  select(bydoy, broodyr, site, flow_cfs) %>%\n  spread(site, flow_cfs)\ndd <- d %>% mutate(diff = (SnakeMoran + SnakeNat) - SnakeBeFlat)\nunique(dd$diff) # check that the flow components sum correctly\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] NA  0\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nd %>% filter(broodyr %in% c(1980:1999)) %>%\n  ggplot(aes(x = bydoy)) +\n  geom_line(aes(y = SnakeBeFlat), color = \"grey30\") +\n  geom_line(aes(y = SnakeMoran), color = \"red\") +\n  geom_line(aes(y = SnakeNat), color = \"blue\") +\n  facet_wrap(~ broodyr) +\n  theme_bw() + theme(panel.grid = element_blank())\n```\n\n::: {.cell-output-display}\n![](FlowTemp_Covariates_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n\n```{.r .cell-code}\nd %>% filter(broodyr %in% c(2000:2024)) %>%\n  ggplot(aes(x = bydoy)) +\n  geom_line(aes(y = SnakeBeFlat), color = \"grey30\") +\n  geom_line(aes(y = SnakeMoran), color = \"red\") +\n  geom_line(aes(y = SnakeNat), color = \"blue\") +\n  facet_wrap(~ broodyr)  +\n  theme_bw() + theme(panel.grid = element_blank())\n```\n\n::: {.cell-output-display}\n![](FlowTemp_Covariates_files/figure-html/unnamed-chunk-13-2.png){width=672}\n:::\n:::\n\n\n\n\n\n\nTime series of cv flows *sensu* Ward *et al.* (2015):\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndd <- d %>% \n  group_by(bydoy) %>% \n  summarize(muSBF = mean(SnakeBeFlat, na.rm = TRUE), sdSBF = sd(SnakeBeFlat, na.rm = TRUE), cvSBF = muSBF/sdSBF,\n            muSMo = mean(SnakeMoran, na.rm = TRUE), sdSMo = sd(SnakeMoran, na.rm = TRUE), cvSMo = muSMo/sdSMo,\n            muSNa = mean(SnakeNat, na.rm = TRUE), sdSNa = sd(SnakeNat, na.rm = TRUE), cvSNa = muSNa/sdSNa)\nggplot(dd, aes(x = bydoy)) + \n  geom_line(aes(y = cvSBF), color = \"grey30\") +\n  geom_line(aes(y = cvSMo), color = \"red\") +\n  geom_line(aes(y = cvSNa), color = \"blue\") +\n  theme_bw() + theme(panel.grid = element_blank())\n```\n\n::: {.cell-output-display}\n![](FlowTemp_Covariates_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n\n## Temperature\n\nDownload and organize air temperature data.\n\nLoad NOAA air temperature data for Moose, WY. Downloaded from https://www.ncdc.noaa.gov/cdo-web/search, 19 Sept 2023 \n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nair_moose <- read_csv(\"Data/NOAA_MooseWy_Climate_1960-2023.csv\") %>% \n  select(STATION, DATE, TMAX, TMIN) %>% \n  rowwise() %>% \n  mutate(tmean = mean(c(TMAX, TMIN)), site = \"moose\") %>% \n  rename(station = STATION, date = DATE, tmax = TMAX, tmin = TMIN) %>%\n  select(station, site, date, tmin, tmax, tmean)\n\n# add rows for days with no observations/data, and linearly interpolation to fill gaps\nrDOY <- range(air_moose$date)\nair_moose_com <- tibble(station = unique(air_moose$station),\n                        site = \"moose\",\n                        date = seq(from = rDOY[1], to = rDOY[2], by = 1))\nair_moose_com <- air_moose_com %>% left_join(air_moose)\nair_moose_com$tmean_int <- na.approx(air_moose_com$tmean)\n```\n:::\n\n\n\n\n\n\nLoad NOAA air temperature data for Afton, WY. Downloaded from https://www.ncdc.noaa.gov/cdo-web/search, 19 Sept 2023 \n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nair_afton <- read_csv(\"Data/NOAA_AftonWy_Climate_1960-2023.csv\") %>% \n  select(STATION, DATE, TMAX, TMIN) %>% \n  rowwise() %>% \n  mutate(tmean = mean(c(TMAX, TMIN)), site = \"afton\") %>% \n  rename(station = STATION, date = DATE, tmax = TMAX, tmin = TMIN) %>%\n  select(station, site, date, tmin, tmax, tmean)\n\n# add rows for days with no observations/data, and linearly interpolation to fill gaps\nrDOY <- range(air_afton$date)\nair_afton_com <- tibble(station = unique(air_afton$station),\n                        site = \"afton\",\n                        date = seq(from = rDOY[1], to = rDOY[2], by = 1))\nair_afton_com <- air_afton_com %>% left_join(air_afton)\nair_afton_com$tmean_int <- na.approx(air_afton_com$tmean)\n```\n:::\n\n\n\n\n\n\nBind and plot time series and correlation:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nairtemp <- bind_rows(air_moose_com, air_afton_com) #%>% mutate(int = ifelse(is.na(tmean), 1, 0))\nairtemp %>% ggplot() + geom_line(aes(x = date, y = tmax)) + facet_wrap(~ site, nrow = 2)\n```\n\n::: {.cell-output-display}\n![](FlowTemp_Covariates_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n\n```{.r .cell-code}\nplot(airtemp$tmean[airtemp$site == \"moose\"] ~ airtemp$tmean[airtemp$site == \"afton\"])\nabline(a = 0, b = 1, col = \"red\")\n```\n\n::: {.cell-output-display}\n![](FlowTemp_Covariates_files/figure-html/unnamed-chunk-17-2.png){width=672}\n:::\n:::\n\n\n\n\n\n\nSet brood year and day of brood year:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# brood year\nairtemp <- airtemp %>% mutate(year = year(date), month = month(date), yday = yday(date))\nairtemp$broodyr <- NA # create brood year variable\nairtemp$broodyr <- ifelse(airtemp$month >= 9 & airtemp$month <= 12, airtemp$year, airtemp$year-1)\nairtemp <- airtemp %>% filter(!broodyr %in% c(1959,2023)) # drop incomplete brood years\n\n# calculate day of brood year\ndlist1 <- list()\ndlist2 <- list()\nyrs <- unique(airtemp$broodyr)\nsites <- unique(airtemp$site)\nfor (j in 1:length(sites)) {\n  for (i in 1:length(yrs)) {\n    d <- filter(airtemp, broodyr == yrs[i] & site == sites[j])\n    d$bydoy <- c(1:dim(d)[1])\n    dlist1[[i]] <- d\n  }\n  dlist2[[j]] <- dlist1\n}\nairtemp2 <- bind_rows(dlist2) %>% filter(!is.na(tmean)) # bind and drop rows with NA\nairtemp2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 42,519 × 12\n   station     site  date        tmin  tmax tmean tmean_int  year month  yday\n   <chr>       <chr> <date>     <dbl> <dbl> <dbl>     <dbl> <dbl> <dbl> <dbl>\n 1 USC00486428 moose 1960-09-01   6.1  21.7  13.9      13.9  1960     9   245\n 2 USC00486428 moose 1960-09-02   7.8  25.6  16.7      16.7  1960     9   246\n 3 USC00486428 moose 1960-09-03   7.8  27.8  17.8      17.8  1960     9   247\n 4 USC00486428 moose 1960-09-04  10    25.6  17.8      17.8  1960     9   248\n 5 USC00486428 moose 1960-09-05   5    25.6  15.3      15.3  1960     9   249\n 6 USC00486428 moose 1960-09-06   4.4  25    14.7      14.7  1960     9   250\n 7 USC00486428 moose 1960-09-07   3.3  22.8  13.0      13.0  1960     9   251\n 8 USC00486428 moose 1960-09-08   2.2  21.7  12.0      12.0  1960     9   252\n 9 USC00486428 moose 1960-09-09   1.1  23.9  12.5      12.5  1960     9   253\n10 USC00486428 moose 1960-09-10   0    22.2  11.1      11.1  1960     9   254\n# ℹ 42,509 more rows\n# ℹ 2 more variables: broodyr <dbl>, bydoy <int>\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n## Summarize Covariates\n\n### Managed Flow\n\nPlot JLD releases with winter and summer periods marked\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflow3 %>% #filter(broodyr >= 2014) %>% \n  ggplot() + geom_line(aes(x = bydoy, y = SnakeMoran)) + \n  geom_vline(xintercept = c(45,211), color = \"blue\") +   # winter = Oct 15 - March 31\n  geom_vline(xintercept = c(91,180), color = \"dodgerblue\") +   # winter = Dec 1 - Feb 28/29\n  geom_vline(xintercept = c(303,365), color = \"red\") +   # summer = July 1 - August 31\n  facet_wrap(~ broodyr) +\n  theme_bw() + theme(panel.grid = element_blank())\n```\n\n::: {.cell-output-display}\n![](FlowTemp_Covariates_files/figure-html/unnamed-chunk-19-1.png){width=960}\n:::\n:::\n\n\n\n\n\n\nSummarize JLD release covariates (managed components)\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\njldflow <- flow3 %>% group_by(broodyr) %>% \n  summarise(jld_winmean = mean(ifelse(bydoy >= 45 & bydoy <= 211, SnakeMoran, NA), na.rm = TRUE), # winter mean flow\n            jld_winmean_log = mean(ifelse(bydoy >= 45 & bydoy <= 211, log(SnakeMoran), NA), na.rm = TRUE),\n            jld_winvar = sd(ifelse(bydoy >= 45 & bydoy <= 211, varJLD, NA), na.rm = TRUE), # winter flow variability\n            jld_sprmean = mean(ifelse(bydoy >= 212 & bydoy <= 302, SnakeMoran, NA), na.rm = TRUE), # spring mean flow\n            jld_sprmean_log = mean(ifelse(bydoy >= 212 & bydoy <= 302, log(SnakeMoran), NA), na.rm = TRUE),\n            jld_sprvar = sd(ifelse(bydoy >= 212 & bydoy <= 302, varJLD, NA), na.rm = TRUE), # spring flow variability\n            jld_summean = mean(ifelse(bydoy >= 303 & bydoy <= 365, SnakeMoran, NA), na.rm = TRUE), # summer mean flows\n            jld_summean_log = mean(ifelse(bydoy >= 303 & bydoy <= 365, log(SnakeMoran), NA), na.rm = TRUE),\n            jld_sumvar = sd(ifelse(bydoy >= 303 & bydoy <= 365, varJLD, NA), na.rm = TRUE), # summer variability\n            jld_peakmag = max(SnakeMoran, na.rm = TRUE), # magnitude of peak spring/summer flows\n            jld_peakmag_log = max(log(SnakeMoran), na.rm = TRUE),\n            jld_peaktime = ifelse(bydoy[which.max(SnakeMoran)] > 200 & bydoy[which.max(SnakeMoran)] < 325, bydoy[which.max(SnakeMoran)], NA), # timing of peak flows\n            # minimum flow - raw\n            jld_annmin = min((SnakeMoran), na.rm = TRUE), # annual minimum flow\n            jld_winmin = min(ifelse(bydoy >= 45 & bydoy <= 211, (SnakeMoran), NA), na.rm = TRUE), # winter minimum flow\n            jld_sprmin = min(ifelse(bydoy >= 212 & bydoy <= 302, (SnakeMoran), NA), na.rm = TRUE), # spring minimum flow\n            jld_summin = min(ifelse(bydoy >= 303 & bydoy <= 365, (SnakeMoran), NA), na.rm = TRUE), # summer minimum flow\n            # minimum flow - logged\n            jld_annmin_log = min(log(SnakeMoran), na.rm = TRUE), # annual minimum flow\n            jld_winmin_log = min(ifelse(bydoy >= 45 & bydoy <= 211, log(SnakeMoran), NA), na.rm = TRUE), # winter minimum flow\n            jld_sprmin_log = min(ifelse(bydoy >= 212 & bydoy <= 302, log(SnakeMoran), NA), na.rm = TRUE), # spring minimum flow\n            jld_summin_log = min(ifelse(bydoy >= 303 & bydoy <= 365, log(SnakeMoran), NA), na.rm = TRUE) # summer minimum flow\n  ) %>% ungroup() \n```\n:::\n\n\n\n\n\n\nPlot time series of managed flow covariate data:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfrow = c(4,3), mar = c(3,4,1,1))\nplot(jld_winmean ~ broodyr, jldflow, type = \"b\")\nplot(jld_winmean_log ~ broodyr, jldflow, type = \"b\")\nplot(jld_winvar ~ broodyr, jldflow, type = \"b\")\n\nplot(jld_sprmean ~ broodyr, jldflow, type = \"b\")\nplot(jld_sprmean_log ~ broodyr, jldflow, type = \"b\")\nplot(jld_sprvar ~ broodyr, jldflow, type = \"b\")\n\nplot(jld_summean ~ broodyr, jldflow, type = \"b\")\nplot(jld_summean_log ~ broodyr, jldflow, type = \"b\")\nplot(jld_sumvar ~ broodyr, jldflow, type = \"b\")\n\nplot(jld_peakmag ~ broodyr, jldflow, type = \"b\")\nplot(jld_peakmag_log ~ broodyr, jldflow, type = \"b\")\nplot(jld_peaktime ~ broodyr, jldflow, type = \"b\")\n```\n\n::: {.cell-output-display}\n![](FlowTemp_Covariates_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\nAnnual and seasonal minimum flow. Horiztonal red line denotes 280 cfs. Vertical grey line denotes 1989.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfrow = c(2,2), mar = c(3,4,1,1))\nplot(jld_annmin ~ broodyr, jldflow, type = \"b\")\nabline(h = (280), col = \"red\", lty = 2)\nabline(v = (1989), col = \"black\", lty = 2)\nplot(jld_winmin ~ broodyr, jldflow, type = \"b\")\nabline(h = (280), col = \"red\", lty = 2)\nabline(v = (1989), col = \"black\", lty = 2)\nplot(jld_sprmin ~ broodyr, jldflow, type = \"b\")\nabline(h = (280), col = \"red\", lty = 2)\nabline(v = (1989), col = \"black\", lty = 2)\nplot(jld_summin ~ broodyr, jldflow, type = \"b\")\nabline(h = (280), col = \"red\", lty = 2)\nabline(v = (1989), col = \"black\", lty = 2)\n```\n\n::: {.cell-output-display}\n![](FlowTemp_Covariates_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\nLog scale\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfrow = c(2,2), mar = c(3,4,1,1))\nplot((jld_annmin_log) ~ broodyr, jldflow, type = \"b\")\nabline(h = log(280), col = \"red\", lty = 2)\nplot((jld_winmin_log) ~ broodyr, jldflow, type = \"b\")\nabline(h = log(280), col = \"red\", lty = 2)\nplot((jld_sprmin_log) ~ broodyr, jldflow, type = \"b\")\nabline(h = log(280), col = \"red\", lty = 2)\nplot((jld_summin_log) ~ broodyr, jldflow, type = \"b\")\nabline(h = log(280), col = \"red\", lty = 2)\n```\n\n::: {.cell-output-display}\n![](FlowTemp_Covariates_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\nPairs plots for key managed flow covariates: \n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggpairs(jldflow %>% select(broodyr, jld_summean, jld_peakmag, jld_peaktime, jld_winmean, jld_winvar))\n```\n\n::: {.cell-output-display}\n![](FlowTemp_Covariates_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n#### Ramp-down\n\nLoad manually identified autumn ramp-down covariate data:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\njldramp <- read_csv(\"Data/Derived/JLD_RampDown_Summary_CalendarYear_1960-2022.csv\") \n```\n:::\n\n\n\n\n\n\nPairs plot of key variables:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggpairs(jldramp %>% select(broodyr, jld_rampdur, jld_rampratemindoy, jld_rampratemin, jld_rampratemin_log))\n```\n\n::: {.cell-output-display}\n![](FlowTemp_Covariates_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\nPlot time series of key ramping variables\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfrow = c(1,3), mgp = c(2.5, 1.25, 0), mar = c(4,4,1,1))\n\nplot(jld_winvar ~ broodyr, jldflow, type = \"l\", bty = \"l\", xlab = \"Year\", ylab = \"JLD winter flow variability\")\npoints(jld_winvar ~ broodyr, jldflow, pch = 16)\nabline(v = 1989, col = \"red\", lty = 2)\nabline(v = 1996, col = \"grey50\", lty = 2)\n\nplot(jld_rampdur ~ broodyr, jldramp, type = \"l\", bty = \"l\", xlab = \"Year\", ylab = \"Duration of ramp-down (days)\")\npoints(jld_rampdur ~ broodyr, jldramp, pch = 16)\nabline(v = 1989, col = \"red\", lty = 2)\nabline(v = 1996, col = \"grey50\", lty = 2)\n\nplot(jld_rampratemindoy ~ broodyr, jldramp, type = \"l\", bty = \"l\", xlab = \"Year\", ylab = \"Timing of ramp-down (julian date)\")\npoints(jld_rampratemindoy ~ broodyr, jldramp, pch = 16)\nabline(v = 1989, col = \"red\", lty = 2)\nabline(v = 1996, col = \"grey50\", lty = 2)\n```\n\n::: {.cell-output-display}\n![](FlowTemp_Covariates_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n\n\nWrite out managed flow data file:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_csv(jldflow, \"Data/Derived/JLD_ManagedFlow_Covariates_BroodYear_1960-2022.csv\")\n```\n:::\n\n\n\n\n\n\n\n### Natural Flow\n\nView time series data by stream and year, with seasons marked\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflow6 %>%\n  filter(site == \"SnakeNat\", broodyr >= 1975) %>%\n  ggplot() + \n  geom_line(aes(x = bydoy, y = flow_cfs)) + \n  geom_vline(xintercept =c(1,90), color = \"green\") +   # fall = Sept 1 - Nov 30\n  geom_vline(xintercept = c(91,181), color = \"blue\") +   # winter = Dec 1 - Feb 29\n  geom_vline(xintercept = c(182,274), color = \"orange\") +   # spring = March 1 - May 31\n  geom_vline(xintercept = c(275,365), color = \"red\") +   # summer = June 1 - Aug 31\n  facet_wrap(~ broodyr) + theme_bw() + theme(panel.grid = element_blank())\n```\n\n::: {.cell-output-display}\n![](FlowTemp_Covariates_files/figure-html/unnamed-chunk-30-1.png){width=864}\n:::\n:::\n\n\n\n\n\n\nCalculate flow metrics for each sites\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# define season and cutoff for data completeness (70%)\nflow6 <- flow6 %>% mutate(season = ifelse(bydoy >= 1 & bydoy <= 90, \"fal\",\n                                          ifelse(bydoy >= 91 & bydoy <= 181, \"win\",\n                                                 ifelse(bydoy >= 182 & bydoy <= 274, \"spr\", \"sum\"))),\n                          cutoff = ifelse(season == \"fal\", 63, \n                                          ifelse(season == \"win\", 63,\n                                                 ifelse(season == \"spr\", 63, 63))))\nflow6 <- flow6 %>% left_join(flow6 %>% group_by(site, broodyr, season) %>% summarise(n = sum(!is.na(flow_cfs))))\n\n# define seasons for loop\nsns <- unique(flow6$season)\n\n# seasonal mean flow\nflowlist <- list()\nfor (i in 1:length(sns)) {\n  d <- flow6 %>% filter(season == sns[i])\n  d <- d[complete.cases(d),]\n  flowlist[[i]] <- d %>% \n    group_by(site, season, broodyr, cutoff, n) %>% \n    summarize(flowmean = ifelse(unique(n) <= unique(cutoff), NA, mean(flow_cfs, na.rm = TRUE))) %>% ungroup() %>%\n    select(site, season, broodyr, flowmean) \n}\nflowsum1 <- bind_rows(flowlist) %>% spread(season, flowmean) %>% rename(natq_falmean = fal, natq_winmean = win, natq_sprmean = spr, natq_summean = sum)\n\n# seasonal log flow \nflowlist <- list()\nfor (i in 1:length(sns)) {\n  d <- flow6 %>% filter(season == sns[i])\n  d <- d[complete.cases(d),]\n  flowlist[[i]] <- d %>% \n    group_by(site, season, broodyr, cutoff, n) %>% \n    summarize(flowmean_log = ifelse(unique(n) <= unique(cutoff), NA, mean(log(flow_cfs), na.rm = TRUE))) %>% ungroup() %>%\n    select(site, season, broodyr, flowmean_log) \n}\nflowsum2 <- bind_rows(flowlist) %>% spread(season, flowmean_log) %>% rename(natq_falmean_log = fal, natq_winmean_log = win, natq_sprmean_log = spr, natq_summean_log = sum)\n\n# seasonal flow variation\nflowlist <- list()\nfor (i in 1:length(sns)) {\n  d <- flow6 %>% filter(season == sns[i])\n  d <- d[complete.cases(d),]\n  flowlist[[i]] <- d %>% \n    group_by(site, season, broodyr, cutoff, n) %>% \n    summarize(flowvar = ifelse(unique(n) <= unique(cutoff), NA, sd(flow_var, na.rm = TRUE))) %>% ungroup() %>%\n    select(site, season, broodyr, flowvar) \n}\nflowsum3 <- bind_rows(flowlist) %>% spread(season, flowvar) %>% rename(natq_falvar = fal, natq_winvar = win, natq_sprvar = spr, natq_sumvar = sum)\n\n# annual flow metrics (no data availability cutoff)\nflowlist <- list()\nsites <- unique(flow6$site)\nfor (i in 1:length(sites)) {\n  d <- flow6 %>% filter(site == sites[i])\n  d <- d[complete.cases(d),]\n  flowlist[[i]] <- d %>% group_by(site, broodyr) %>% \n    summarize(natq_peakmag = max(flow_cfs, na.rm = TRUE), # magnitude of peak spring flows\n              natq_peakmag_log = max(log(flow_cfs), na.rm = TRUE), # logged\n              natq_annmin = min(flow_cfs, na.rm = TRUE), # annual minimum flow\n              natq_annmin_log = min(log(flow_cfs), na.rm = TRUE), # logged\n              natq_peaktime = bydoy[which.max(flow_cfs)], # brood year day of peak spring flows\n              natq_flooddur = sum(flow_cfs >= quantile(d$flow_cfs[!is.na(d$flow_cfs)], probs = 0.75), na.rm = T), # number of days flow is greater than the long-term 75th percentile of flow\n              natq_floodvar = sd(flow_var[flow_cfs >= quantile(d$flow_cfs[!is.na(d$flow_cfs)], probs = 0.75)], na.rm = TRUE), # spring/summer flood variability (var in flood pulse)\n              natq_floodmag = sum(flow_cfs[flow_cfs >= quantile(d$flow_cfs[!is.na(d$flow_cfs)], probs = 0.75)], na.rm = T) # magnitude of spring flood (flow > long-term 75th percentile)\n    ) %>% ungroup()\n}\nflowsum4 <- bind_rows(flowlist) \n\n# join\nflowsum <- flowsum1 %>% left_join(flowsum2) %>% left_join(flowsum3) %>% left_join(flowsum4)\n```\n:::\n\n\n\n\n\n\nPlot time series data (natural Snake River only)\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n  d <- flowsum %>% filter(site == \"SnakeNat\")\n  par(mfrow = c(7,3), mar = c(3,4,1,1))\n  \n  plot(natq_falmean ~ broodyr, d, type = \"b\")\n  plot(natq_falmean_log ~ broodyr, d, type = \"b\")\n  plot(natq_falvar ~ broodyr, d, type = \"b\")\n  \n  plot(natq_winmean ~ broodyr, d, type = \"b\")\n  plot(natq_winmean_log ~ broodyr, d, type = \"b\")\n  plot(natq_winvar ~ broodyr, d, type = \"b\")\n  \n  plot(natq_sprmean ~ broodyr, d, type = \"b\")\n  plot(natq_sprmean_log ~ broodyr, d, type = \"b\")\n  plot(natq_sprvar ~ broodyr, d, type = \"b\")\n  \n  plot(natq_summean ~ broodyr, d, type = \"b\")\n  plot(natq_summean_log ~ broodyr, d, type = \"b\")\n  plot(natq_sumvar ~ broodyr, d, type = \"b\")\n  \n  plot(natq_peakmag ~ broodyr, d, type = \"b\")\n  plot(natq_peakmag_log ~ broodyr, d, type = \"b\")\n  plot(natq_peaktime ~ broodyr, d, type = \"b\")\n  \n  plot(natq_flooddur ~ broodyr, d, type = \"b\")\n  plot(natq_floodvar ~ broodyr, d, type = \"b\")\n  plot(natq_floodmag ~ broodyr, d, type = \"b\")\n  \n  plot(natq_annmin ~ broodyr, d, type = \"b\")\n  plot(natq_annmin_log ~ broodyr, d, type = \"b\")\n```\n\n::: {.cell-output-display}\n![](FlowTemp_Covariates_files/figure-html/unnamed-chunk-32-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\nWrite out data file\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_csv(flowsum, \"Data/Derived/SnakeTribs_NaturalFlow_Covariates_BroodYear_1960-2022.csv\")\nflowsum <- read_csv(\"Data/Derived/SnakeTribs_NaturalFlow_Covariates_BroodYear_1960-2022.csv\")\n```\n:::\n\n\n\n\n\n\nHow many/what proportion of years since 1989 have combined winter flows been below certain thresholds? e.g., 1302 cfs and winter mean flow\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflowsum %>% filter(site == \"SnakeBeFlat\") %>% \n  ggplot(aes(x = broodyr, y = natq_winmean)) + geom_line() + geom_point() + geom_hline(yintercept = 1302, color = \"red\")\n```\n\n::: {.cell-output-display}\n![](FlowTemp_Covariates_files/figure-html/unnamed-chunk-34-1.png){width=672}\n:::\n\n```{.r .cell-code}\ndim(flowsum %>% filter(site == \"SnakeBeFlat\", broodyr >= 1989, natq_winmean >= 1302))[1] / dim(flowsum %>% filter(site == \"SnakeBeFlat\", broodyr >= 1989))[1]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.4705882\n```\n\n\n:::\n:::\n\n\n\n\n\n\nHistorical (1989-present) seasonal flow summaries for Bryana (25, 50, and 75% quantiles)\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbry_flowsum <- flowsum %>% filter(broodyr >= 1989, site %in% c(\"SnakeBeFlat\", \"SnakeMoran\", \"SnakeNat\")) %>% group_by(site) %>%\n  reframe(q_fal_25 = quantile(natq_falmean, probs = 0.25, na.rm = T), q_fal_50 = quantile(natq_falmean, probs = 0.50, na.rm = T), q_fal_75 = quantile(natq_falmean, probs = 0.75, na.rm = T),\n          q_win_25 = quantile(natq_winmean, probs = 0.25, na.rm = T), q_win_50 = quantile(natq_winmean, probs = 0.50, na.rm = T), q_win_75 = quantile(natq_winmean, probs = 0.75, na.rm = T),\n          q_spr_25 = quantile(natq_sprmean, probs = 0.25, na.rm = T), q_spr_50 = quantile(natq_sprmean, probs = 0.50, na.rm = T), q_spr_75 = quantile(natq_sprmean, probs = 0.75, na.rm = T),\n          q_sum_25 = quantile(natq_summean, probs = 0.25, na.rm = T), q_sum_50 = quantile(natq_summean, probs = 0.50, na.rm = T), q_sum_75 = quantile(natq_summean, probs = 0.75, na.rm = T),\n          q_peakmag_25 = quantile(natq_peakmag, probs = 0.25, na.rm = T), q_peakmag_50 = quantile(natq_peakmag, probs = 0.50, na.rm = T), q_peakmag_75 = quantile(natq_peakmag, probs = 0.75, na.rm = T),\n          q_peaktime_25 = quantile(natq_peaktime, probs = 0.25, na.rm = T), q_peaktime_50 = quantile(natq_peaktime, probs = 0.50, na.rm = T), q_peaktime_75 = quantile(natq_peaktime, probs = 0.75, na.rm = T)) %>% \n  ungroup()\nwrite_csv(bry_flowsum, \"Data/Derived/Snake_FlowSummaryForBryana_1989-2022.csv\")\n\n# plot seasonal summaries\njpeg(\"Figures/Covariates/Snake_FlowSummaryForBryana_1989-2022.jpg\", units = \"in\", height = 10, width = 10, res = 500)\np1 <- tibble(ssn = as.ordered(c(\"fal\", \"win\", \"spr\", \"sum\")), \n       q25 = unlist(bry_flowsum %>% filter(site == \"SnakeBeFlat\") %>% select(q_fal_25, q_win_25, q_spr_25, q_sum_25)), \n       q50 = unlist(bry_flowsum %>% filter(site == \"SnakeBeFlat\") %>% select(q_fal_50, q_win_50, q_spr_50, q_sum_50)), \n       q75 = unlist(bry_flowsum %>% filter(site == \"SnakeBeFlat\") %>% select(q_fal_75, q_win_75, q_spr_75, q_sum_75))) %>%\n  gather(quant, flow, q25:q75) %>%\n  arrange(rev(quant)) %>%\n  ggplot(aes(fill = quant, x = ssn, y = flow)) + geom_bar(position = \"identity\", stat = \"identity\") + scale_x_discrete(limits = c(\"fal\", \"win\", \"spr\", \"sum\")) + scale_y_continuous(limits = c(0,8100)) + theme(plot.margin = margin(1,0.5,0.5,0.5, unit = \"cm\"))\np2 <- tibble(ssn = c(\"fal\", \"win\", \"spr\", \"sum\"), \n             q25 = unlist(bry_flowsum %>% filter(site == \"SnakeMoran\") %>% select(q_fal_25, q_win_25, q_spr_25, q_sum_25)), \n             q50 = unlist(bry_flowsum %>% filter(site == \"SnakeMoran\") %>% select(q_fal_50, q_win_50, q_spr_50, q_sum_50)), \n             q75 = unlist(bry_flowsum %>% filter(site == \"SnakeMoran\") %>% select(q_fal_75, q_win_75, q_spr_75, q_sum_75))) %>%\n  gather(quant, flow, q25:q75) %>%\n  arrange(ssn, rev(quant)) %>%\n  ggplot(aes(fill = quant, x = ssn, y = flow)) + geom_bar(position = \"identity\", stat = \"identity\") + scale_x_discrete(limits = c(\"fal\", \"win\", \"spr\", \"sum\")) + scale_y_continuous(limits = c(0,8100)) + theme(plot.margin = margin(1,0.5,0.5,0.5, unit = \"cm\"))\np3 <- tibble(ssn = c(\"fal\", \"win\", \"spr\", \"sum\"), \n             q25 = unlist(bry_flowsum %>% filter(site == \"SnakeNat\") %>% select(q_fal_25, q_win_25, q_spr_25, q_sum_25)), \n             q50 = unlist(bry_flowsum %>% filter(site == \"SnakeNat\") %>% select(q_fal_50, q_win_50, q_spr_50, q_sum_50)), \n             q75 = unlist(bry_flowsum %>% filter(site == \"SnakeNat\") %>% select(q_fal_75, q_win_75, q_spr_75, q_sum_75))) %>%\n  gather(quant, flow, q25:q75) %>%\n  arrange(ssn, rev(quant)) %>%\n  ggplot(aes(fill = quant, x = ssn, y = flow)) + geom_bar(position = \"identity\", stat = \"identity\") + scale_x_discrete(limits = c(\"fal\", \"win\", \"spr\", \"sum\")) + scale_y_continuous(limits = c(0,8100)) + theme(plot.margin = margin(1,0.5,0.5,0.5, unit = \"cm\"))\nggarrange(p1, p2, p3, labels = c(\"Snake Below Flat (combined)\", \"Snake Moran (JLD Release)\", \"Snake Natural (tributaries)\"))\ndev.off()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\npng \n  2 \n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n### Air Temperature\n\nPlot Moose, WY, air temp with seasons marked:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nairtemp2 %>%\n  filter(site == \"moose\") %>%\n  ggplot() + \n  geom_line(aes(x = bydoy, y = tmean)) + \n  geom_vline(xintercept = c(1,90), color = \"green\") +   # fall = Sept 1 - Nov 30\n  geom_vline(xintercept = c(91,181), color = \"blue\") +   # winter = Dec 1 - Feb 29\n  geom_vline(xintercept = c(182,274), color = \"orange\") +   # spring = March 1 - May 31\n  geom_vline(xintercept = c(275,365), color = \"red\") +   # summer = June 1 - Aug 31\n  facet_wrap(~ broodyr) +   # summer = June 1 - Aug 31\n  facet_wrap(~ broodyr) + theme_bw() + theme(panel.grid = element_blank())\n```\n\n::: {.cell-output-display}\n![](FlowTemp_Covariates_files/figure-html/unnamed-chunk-36-1.png){width=864}\n:::\n:::\n\n\n\n\n\n\nCalculate air temp. metrics for each site:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# define season and cutoff for data completeness (70%)\nairtemp2a <- airtemp2 %>% mutate(season = ifelse(bydoy >= 1 & bydoy <= 90, \"fal\",\n                                                ifelse(bydoy >= 91 & bydoy <= 181, \"win\",\n                                                       ifelse(bydoy >= 182 & bydoy <= 274, \"spr\", \"sum\")))) %>%\n                         mutate(cutoff = ifelse(season == \"fal\", 63, \n                                                ifelse(season == \"win\", 63,\n                                                       ifelse(season == \"spr\", 63, 63))))\nairtemp2 <- airtemp2a %>% left_join(airtemp2a %>% group_by(site, broodyr, season) %>% summarise(n = sum(!is.na(tmean))))\n\n# seasonal mean air temp \nairlist <- list()\nsns <- unique(airtemp2$season)\nfor (i in 1:length(sns)) {\n  d <- airtemp2 %>% filter(season == sns[i])\n  d <- d[complete.cases(d),]\n  airlist[[i]] <- d %>% \n    group_by(site, season, broodyr, cutoff, n) %>% \n    summarize(tmean = ifelse(unique(n) <= unique(cutoff), NA, mean(tmean, na.rm = TRUE)),\n              tmax = ifelse(unique(n) <= unique(cutoff), NA, mean(tmax, na.rm = TRUE)),\n              tmin = ifelse(unique(n) <= unique(cutoff), NA, mean(tmin, na.rm = TRUE))) %>% ungroup() %>%\n    select(site, season, broodyr, tmean, tmax, tmin) \n}\nairsum1a <- bind_rows(airlist) %>% select(-c(tmax, tmin)) %>% spread(season, tmean) %>% rename(temp_falmean = fal, temp_winmean = win, temp_sprmean = spr, temp_summean = sum) \nairsum1b <- bind_rows(airlist) %>% select(-c(tmean, tmin))  %>% spread(season, tmax) %>% rename(temp_falmax = fal, temp_winmax = win, temp_sprmax = spr, temp_summax = sum)\nairsum1c <- bind_rows(airlist) %>% select(-c(tmax, tmean))  %>% spread(season, tmin) %>% rename(temp_falmin = fal, temp_winmin = win, temp_sprmin = spr, temp_summin = sum) \nairsum1 <- airsum1a %>% left_join(airsum1b) %>% left_join(airsum1c)\n\n# annual temp metrics\nairlist <- list()\nsites <- unique(airtemp2$site)\nairsum3 <- airtemp2 %>% select(-n) %>%\n  left_join(airtemp2 %>% group_by(site, broodyr) %>% summarise(n = sum(!is.na(tmean)))) \nfor (i in 1:length(sites)) {\n  d <- airsum3 %>% filter(site == sites[i])\n  d <- d[complete.cases(d),]\n  airlist[[i]] <- d %>% group_by(site, broodyr, n) %>% \n    summarize(temp_bel0dur = ifelse(unique(n) <= 255, NA, sum(tmean <= 0, na.rm = TRUE)),\n              temp_abv15dur = ifelse(unique(n) <= 255, NA, sum(tmean >= 15, na.rm = TRUE)),\n              temp_abv18dur = ifelse(unique(n) <= 255, NA, sum(tmean >= 18, na.rm = TRUE)),\n              temp_abv20dur = ifelse(unique(n) <= 255, NA, sum(tmean >= 20, na.rm = TRUE)),\n              temp_annmin = ifelse(unique(n) <= 255, NA, min(tmean, na.rm = TRUE)),\n              temp_annmax = ifelse(unique(n) <= 255, NA, max(tmean, na.rm = TRUE))\n              ) %>% ungroup()\n}\nairsum2 <- bind_rows(airlist) %>% select(-n)\n\n# join\nairsum <- airsum1 %>% left_join(airsum2)\n```\n:::\n\n\n\n\n\n\nTime series plots, Moose only\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n  d <- airsum %>% filter(site == \"moose\")\n  par(mfrow = c(4,3), mar = c(3,4,1,1))\n  \n  plot(temp_falmean ~ broodyr, d, type = \"b\")\n  legend(\"bottomright\", legend = sites[i], bty = \"n\")\n  plot(temp_falmin ~ broodyr, d, type = \"b\")\n  plot(temp_falmax ~ broodyr, d, type = \"b\")\n  \n  plot(temp_winmean ~ broodyr, d, type = \"b\")\n  plot(temp_winmin ~ broodyr, d, type = \"b\")\n  plot(temp_winmax ~ broodyr, d, type = \"b\")\n  \n  plot(temp_sprmean ~ broodyr, d, type = \"b\")\n  plot(temp_sprmin ~ broodyr, d, type = \"b\")\n  plot(temp_sprmax ~ broodyr, d, type = \"b\")\n  \n  plot(temp_summean ~ broodyr, d, type = \"b\")\n  plot(temp_summin ~ broodyr, d, type = \"b\")\n  plot(temp_summax ~ broodyr, d, type = \"b\")\n```\n\n::: {.cell-output-display}\n![](FlowTemp_Covariates_files/figure-html/unnamed-chunk-38-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n\n\n\nCompare summer mean and min temps per Bryan Shuman comment\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# jpeg(\"Redd Counts Ricker/SummerTempCovs.jpg\", units = \"in\", height = 6, width = 8, res = 500)\np1 <- airsum %>% filter(site == \"moose\") %>% ggplot(aes(x = broodyr, y = temp_summean)) + geom_point() + geom_line() + xlab(\"Brood Year\") + ylab(\"Summer mean temperature\") + theme(plot.margin = margin(0.5,0.5,0.5,0.5, unit = \"cm\"))\np2 <- airsum %>% filter(site == \"moose\") %>% ggplot(aes(x = broodyr, y = temp_summin)) + geom_point() + geom_line() + xlab(\"Brood Year\") + ylab(\"Summer minimum temperature\") + theme(plot.margin = margin(0.5,0.5,0.5,0.5, unit = \"cm\"))\np3 <- airsum %>% filter(site == \"moose\") %>% ggplot(aes(x = temp_summean, y = temp_summin)) + geom_point() + xlab(\"Mean\") + ylab(\"Minimum\") + stat_cor(method = \"pearson\") + theme(plot.margin = margin(0.5,0.5,0.5,0.5, unit = \"cm\"))\nggarrange(ggarrange(p1, p2, nrow = 2), p3, ncol = 2)\n```\n\n::: {.cell-output-display}\n![](FlowTemp_Covariates_files/figure-html/unnamed-chunk-40-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# dev.off()\n```\n:::\n\n\n\n\n\n\nPlot time series of temperature thresholds:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n  d <- airsum %>% filter(site == \"moose\")\n  par(mfrow = c(3,2), mar = c(3,4,1,1))\n  plot(temp_bel0dur ~ broodyr, d, type = \"b\")\n  plot(temp_abv15dur ~ broodyr, d, type = \"b\")\n  plot(temp_abv18dur ~ broodyr, d, type = \"b\")\n  plot(temp_abv20dur ~ broodyr, d, type = \"b\")\n  plot(temp_annmin ~ broodyr, d, type = \"b\")\n  plot(temp_annmax ~ broodyr, d, type = \"b\")\n```\n\n::: {.cell-output-display}\n![](FlowTemp_Covariates_files/figure-html/unnamed-chunk-41-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\nPairs plots of seasonal mean air temperature variables:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggpairs(airsum %>% select(temp_falmean, temp_winmean, temp_sprmean, temp_summean))\n```\n\n::: {.cell-output-display}\n![](FlowTemp_Covariates_files/figure-html/unnamed-chunk-42-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\nWrite out data file\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_csv(airsum, \"Data/Derived/AirTemperature_Covariates_BroodYear_1960-2022.csv\")\nairsum <- read_csv(\"Data/Derived/AirTemperature_Covariates_BroodYear_1960-2022.csv\")\n```\n:::\n\n\n\n\n\n\nPlot select air temperature time series data:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\njpeg(\"Figures/Covariates/SelectAirTempCovs.jpg\", units = \"in\", width = 7, height = 3.5, res = 1000)\npar(mfrow = c(1,2), mgp = c(2.5, 1, 0), mar = c(4,4,1,1))\n\n# fall\n# plot(temp_falmean ~ broodyr, airsum %>% filter(site == \"moose\"), type = \"l\", bty = \"l\", xlab = \"Year\", ylab = expression(paste(\"Fall temperature (\"^\"o\", \"C)\", sep = \"\")))\n# points(temp_falmean ~ broodyr, airsum %>% filter(site == \"moose\"), pch = 16)\n# mod <- lm(temp_falmean ~ broodyr, airsum %>% filter(site == \"moose\" & broodyr >= 1980))\n# predz <- predict(mod, newdata = list(broodyr = c(1980:2022)))\n# lines(predz ~ c(1980:2022), lwd = 2, col = \"red\")\n\n# winter\nplot(temp_winmean ~ broodyr, airsum %>% filter(site == \"moose\"), type = \"l\", bty = \"l\", xlab = \"Year\", ylab = expression(paste(\"Winter temperature (\"^\"o\", \"C)\", sep = \"\")))\npoints(temp_winmean ~ broodyr, airsum %>% filter(site == \"moose\"), pch = 16)\nmod <- lm(temp_winmean ~ broodyr, airsum %>% filter(site == \"moose\" & broodyr >= 1980))\npredz <- predict(mod, newdata = list(broodyr = c(1980:2022)))\nlines(predz ~ c(1980:2022), lwd = 2, col = \"red\")\n\n# spring\n# plot(temp_sprmean ~ broodyr, airsum %>% filter(site == \"moose\"), type = \"l\", bty = \"l\", xlab = \"Year\", ylab = expression(paste(\"Spring temperature (\"^\"o\", \"C)\", sep = \"\")))\n# points(temp_sprmean ~ broodyr, airsum %>% filter(site == \"moose\"), pch = 16)\n# mod <- lm(temp_sprmean ~ broodyr, airsum %>% filter(site == \"moose\" & broodyr >= 1980))\n# predz <- predict(mod, newdata = list(broodyr = c(1980:2022)))\n# lines(predz ~ c(1980:2022), lwd = 2, col = \"red\")\n\n# summer\nplot(temp_summean ~ broodyr, airsum %>% filter(site == \"moose\"), type = \"l\", bty = \"l\", xlab = \"Year\", ylab = expression(paste(\"Summer temperature (\"^\"o\", \"C)\", sep = \"\")))\npoints(temp_summean ~ broodyr, airsum %>% filter(site == \"moose\"), pch = 16)\nmod <- lm(temp_summean ~ broodyr, airsum %>% filter(site == \"moose\" & broodyr >= 1980))\npredz <- predict(mod, newdata = list(broodyr = c(1980:2022)))\nlines(predz ~ c(1980:2022), lwd = 2, col = \"red\")\n\ndev.off()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\npng \n  2 \n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"site_libs/htmltools-fill-0.5.8.1/fill.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/htmlwidgets-1.6.4/htmlwidgets.js\"></script>\n<script src=\"site_libs/jquery-3.6.0/jquery-3.6.0.min.js\"></script>\n<link href=\"site_libs/leaflet-1.3.1/leaflet.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/leaflet-1.3.1/leaflet.js\"></script>\n<link href=\"site_libs/leafletfix-1.0.0/leafletfix.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/proj4-2.6.2/proj4.min.js\"></script>\n<script src=\"site_libs/Proj4Leaflet-1.0.1/proj4leaflet.js\"></script>\n<link href=\"site_libs/rstudio_leaflet-1.3.1/rstudio_leaflet.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/leaflet-binding-2.2.2/leaflet.js\"></script>\n<script src=\"site_libs/leaflet-providers-2.0.0/leaflet-providers_2.0.0.js\"></script>\n<script src=\"site_libs/leaflet-providers-plugin-2.2.2/leaflet-providers-plugin.js\"></script>\n<link href=\"site_libs/HomeButton-0.0.1/home-button.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/HomeButton-0.0.1/home-button.js\"></script>\n<script src=\"site_libs/HomeButton-0.0.1/easy-button-src.min.js\"></script>\n<script src=\"site_libs/clipboard-0.0.1/setClipboardText.js\"></script>\n<link href=\"site_libs/mapviewCSS-0.0.1/mapview-popup.css\" rel=\"stylesheet\" />\n<link href=\"site_libs/mapviewCSS-0.0.1/mapview.css\" rel=\"stylesheet\" />\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}